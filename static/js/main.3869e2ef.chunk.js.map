{"version":3,"sources":["Infobox.js","LineGraph.js","Table.js","Utils.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","LineGraph","casesType","options","legend","display","element","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLine","ticks","callback","index","values","useState","setData","useEffect","fetch","then","response","json","chartData","lastDataPoint","date","newDataPoint","x","y","push","buildChartData","length","datasets","borderColor","backgroundColor","Table","countries","map","country","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sortedData","sort","a","b","prettyPrintStat","stat","showDataOnMap","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","TileLayer","url","attribution","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3869e2ef.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./Infobox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n  console.log(title, active);\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" className=\"typo__title\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import numeral from 'numeral';\r\nimport React, { useEffect, useState } from 'react'\r\nimport {Line} from \"react-chartjs-2\";\r\n\r\nfunction LineGraph({casesType=\"cases\"}) {\r\n\r\n\r\n\r\n    const options = {\r\n        legend:{\r\n            display:false,\r\n        },\r\n\r\n        element:{\r\n            point:{\r\n                radius:0,\r\n            },\r\n        },\r\n        maintainAspectRatio:false,\r\n        tooltips:{\r\n            mode:\"index\",\r\n            intersect:false,\r\n            callbacks:{\r\n                label:function (tooltipItem, data) {\r\n                    return numeral(tooltipItem.value).format(\"+0,0\")\r\n                },\r\n            },\r\n        },\r\n\r\n        scales: {\r\n            xAxes:[{\r\n                type:\"time\",\r\n                time:{\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat:\"ll\",\r\n                },\r\n            },\r\n            \r\n        ],\r\n        yAxes:[\r\n            {\r\n                gridLine:{\r\n                    display: false,\r\n                },\r\n                ticks:{\r\n                    callback: function (value, index, values){\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ]\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    const [data, setData] = useState()\r\n\r\n    const buildChartData= (data, casesType='cases') =>{\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n\r\n        for(let date in data.cases){\r\n            if (lastDataPoint){\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint,\r\n                };\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        };\r\n        return chartData;\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n        .then(response => response.json())\r\n        .then(data =>{\r\n            const chartData = buildChartData(data);\r\n            setData(chartData);\r\n        })\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"linegraph\">\r\n            {data?.length>0 &&(\r\n                < Line data={{\r\n                    datasets:[\r\n                        {data:data,\r\n                        borderColor: \"#CC1034\",\r\n                        backgroundColor:\"rgba(204, 16, 52, 0.5)\"\r\n                    }\r\n                    ]\r\n                }}\r\n                       options = {options} />\r\n            )}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React from 'react'\r\nimport \"./Table.css\"\r\n\r\n\r\nfunction Table({countries}) {\r\n\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) => (\r\n               <tr>\r\n                   <td>{country}</td>\r\n                   <td>\r\n                       <strong>{cases}</strong>\r\n                    </td>\r\n               </tr> \r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#3391ff\",\r\n    rgb: \"rgb(67, 68, 251)\",\r\n    half_op: \"rgba(67, 68, 251, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./Utils\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Map;","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./Infobox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./Utils\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  console.log(casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">All</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            className=\"infobox__class\"\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            className=\"infobox__class\"\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            className=\"infobox__class\"\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n        <h3>Worldwide new {casesType}</h3>\n        <LineGraph casesType={casesType} />\n\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}