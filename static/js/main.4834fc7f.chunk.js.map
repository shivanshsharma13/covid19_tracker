{"version":3,"sources":["Infobox.js","Table.js","Utils.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["Infobox","title","total","cases","Card","className","CardContent","Typography","color","Table","countries","map","country","sortData","data","sortedData","sort","a","b","LineGraph","casesType","options","legend","display","element","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLine","ticks","callback","index","values","useState","setData","useEffect","fetch","then","response","json","chartData","lastDataPoint","date","newDataPoint","x","y","push","buildChartData","length","datasets","borderColor","backgroundColor","App","contries","setCountries","setCountry","countryInfo","setCountryInfo","tableData","setTableData","responce","name","iso2","getCountriesData","onCountryChange","event","contrycode","target","url","FormControl","classNmae","Select","variant","onChange","MenuItem","todayCases","recovered","todayRecovered","deaths","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4834fc7f.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\nimport  \"./Infobox.css\"\r\n\r\nfunction Infobox({title, total, cases}) {\r\n    return (\r\n            <Card className=\"infobox\">\r\n                <CardContent>\r\n\r\n                    <Typography className=\"infobox__title\" color=\"textSecondary\">{title}</Typography>\r\n                    <h2 className=\"infobox__cases\">{cases}</h2>\r\n                    <Typography className=\"infobox__total\" color=\"textSecondary\">{total} Total</Typography>\r\n\r\n                </CardContent>\r\n            </Card>\r\n    )\r\n}\r\n\r\nexport default Infobox\r\n","import React from 'react'\r\nimport \"./Table.css\"\r\n\r\n\r\nfunction Table({countries}) {\r\n\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) => (\r\n               <tr>\r\n                   <td>{country}</td>\r\n                   <td>\r\n                       <strong>{cases}</strong>\r\n                    </td>\r\n               </tr> \r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","export const sortData = (data) =>{\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a,b) =>  (a.cases > b.cases ? -1 : 1));\r\n    return sortedData;\r\n}","import numeral from 'numeral';\r\nimport React, { useEffect, useState } from 'react'\r\nimport {Line} from \"react-chartjs-2\";\r\n\r\nfunction LineGraph({casesType=\"cases\"}) {\r\n\r\n\r\n\r\n    const options = {\r\n        legend:{\r\n            display:false,\r\n        },\r\n\r\n        element:{\r\n            point:{\r\n                radius:0,\r\n            },\r\n        },\r\n        maintainAspectRatio:false,\r\n        tooltips:{\r\n            mode:\"index\",\r\n            intersect:false,\r\n            callbacks:{\r\n                label:function (tooltipItem, data) {\r\n                    return numeral(tooltipItem.value).format(\"+0,0\")\r\n                },\r\n            },\r\n        },\r\n\r\n        scales: {\r\n            xAxes:[{\r\n                type:\"time\",\r\n                time:{\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat:\"ll\",\r\n                },\r\n            },\r\n            \r\n        ],\r\n        yAxes:[\r\n            {\r\n                gridLine:{\r\n                    display: false,\r\n                },\r\n                ticks:{\r\n                    callback: function (value, index, values){\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ]\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    const [data, setData] = useState()\r\n\r\n    const buildChartData= (data, casesType='cases') =>{\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n\r\n        for(let date in data.cases){\r\n            if (lastDataPoint){\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint,\r\n                };\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        };\r\n        return chartData;\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n        .then(response => response.json())\r\n        .then(data =>{\r\n            const chartData = buildChartData(data);\r\n            setData(chartData);\r\n        })\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"linegraph\">\r\n            {data?.length>0 &&(\r\n                < Line data={{\r\n                    datasets:[\r\n                        {data:data,\r\n                        borderColor: \"#CC1034\",\r\n                        backgroundColor:\"rgba(204, 16, 52, 0.5)\"\r\n                    }\r\n                    ]\r\n                }}\r\n                       options = {options} />\r\n            )}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import './App.css';\nimport {MenuItem, FormControl, Select, CardContent, Card} from \"@material-ui/core\";\nimport { useEffect, useState } from 'react';\nimport Infobox from './Infobox';\nimport Table from './Table';\nimport { sortData } from './Utils';\nimport LineGraph from './LineGraph';\n\n\nfunction App() {\n\n  const [contries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n\n\n  useEffect(() =>{\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((responce) => responce.json())\n    .then((data) => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n\n\n\n  useEffect(() => {\n    \n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then(responce => responce.json())\n      .then((data) => {\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }));\n\n          const sortedData = sortData(data);\n          setCountries (countries);\n          setTableData(sortedData);\n      });\n    };\n    getCountriesData();\n  }, [])\n\n\n    const onCountryChange = async (event) => {\n      const contrycode = event.target.value;\n      setCountry(contrycode);  \n\n      const url = contrycode === \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${contrycode}`\n    \n        await fetch(url)\n        .then(responce => responce.json())\n        .then(data => {\n          setCountry(contrycode)\n          setCountryInfo(data);\n        })\n\n    }\n\n    \n \n  return (\n    <div className=\"app\">\n\n      <div className=\"app__left\">\n\n        \n        <div className=\"app__header\">\n          <h1>Covid19 tracker</h1>\n          <FormControl classNmae=\"app__dropdown\">\n              <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n                  <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                  {contries.map((country) => (\n                    <MenuItem value={country.value}>{country.name}</MenuItem>\n                  ))}\n              </Select>\n          </FormControl>\n        </div>\n\n          <div className=\"app__stats\">\n          <Infobox title=\"Corona Virus Cases\" total={countryInfo.cases}  cases={countryInfo.todayCases}/>\n          <Infobox title=\"Corona Virus Recoverd\" total= {countryInfo.recovered} cases= {countryInfo.todayRecovered}/>\n          <Infobox title=\"Corona Virus Deaths\" total={countryInfo.deaths} cases= {countryInfo.todayDeaths}/>\n          </div>\n          \n          <LineGraph />\n      </div>\n      \n      <div className=\"app__right\">\n            <Card>\n              <CardContent>\n                <h3>Live cases in World</h3>\n                  <Table countries={tableData}/>\n                <h3>World cases</h3>\n                \n              </CardContent>\n            </Card>\n      </div>\n      \n        \n      \n    </div>\n  );\n} \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}